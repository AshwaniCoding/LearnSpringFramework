------------------------------------SPRING NOTES--------------------------------------18 Jun 25

---------------------------------BASIC INSTALLATION---------------------------------

- download java >17 version and eclipse ide

-----------------------------------FIRST PROJECT-------------------------------------

- spring framework provides dependency injection and auto wiring
- terminology: tight coupling, loose coupling, IOC container, Application context, component Scan, Dependency Injection, Spring Beans, Auto wiring

- go to the website "start.spring.io" and there use the latest version of spring and don't use the snapshot version
- also use the version of java above 17 and after that click on generate
- maven: java dependency management tool
- spring initializer:  website to quickly create java project

---------------------------------RUN MARIO GAME---------------------------------------19 Jun 25

- for running the first game you should crate a class with the main method
- create object of MarioGame class and also object of GameRunner class
- also declare the MarioGame object in the game runner class and using constructor set the value
- pass the object of marioGame class inside the GameRunner object
- then create a run method inside the GameRunner class

- after that just create the up, down, left and right button in the mario game class
- after that use all the methods or actions inside the run() method

------------------------------------VAR--------------------------------------

- it is a new feature introduced in java 10
- type inference: it allows the compiler to infer the type of the variable based on the value assigned
- compiler will automatically infer the type of variable

----------------------------TIGHTLY COUPLED-----------------------------------

- suppose you create another game SuperContraGame with some actions like up, down, left and right
- and use the same game runner file to run the game
- then you have to do changes like you have to declare the object of new superContraGame
- this is called the tight coupling
- coupling: how much work is involved in changing something
- few examples: a car is tightly coupled to an engine while wheels are loosely coupled to car
- another example is you can go with laptop anywhere but you can not move computer anywhere
- basically it should not specific to only one game
- in the above case game runner is tightly coupled to only one class

- when one class is heavily dependent on another class that is called the tight coupling

--------------------------------LOOSELY COUPLED-----------------------------------

- for making it loosely coupled just use the interface GamingConsole so that you can remove the tight coupling
- just create a interface and implement on both the games
- then instead of creating an object of any specific class, create the object of interface

- as you have implemented loosely coupled so you can now add as many games as you want
- add pacman game in the console and run it using the GameRunner class

------------------------------SPRING FRAMEWORK, CONFIGURATION ANNOTATION------------------------------------
- wiring of dependencies: the process of providing one object with the necessary dependencies it needs to function, often by passing them into a constructor or method
- firstly created the App02HelloWorldSpring class and then also created the HelloWorldConfiguration with @Configuration annotation
- then just created new AnnotationConfigApplicationContext() by passing the HelloWorldConfiguration.class
- @Configuration annotation says that this class contains the beans that you want to manage using spring
- all the spring beans defined inside the configuration class
- configuration class we need to launch it so for that use the new AnnotationConfigApplicationContext()
- we want to launch a spring context with that configuration so we launch inside jvm using the main method
- we have to declare the beans inside the configuration class

--------------------------FIRST JAVA SPRING BEAN----------------------------------------------

- for that just go inside the configuration class declare a method and use the @Bean annotation
- now that method will be treated as a bean and can be managed by spring
- and you can access it by using the context like context.getBean("beanName or methodName")
- jvm >> spring >> bean
- you can name the bean also by just the name

----------------------------RECORD------------------------------------

- new feature introduced in jdk 16
- record Person (String name, int age){};
- when you are using record then you don't need to create setter getter and constructor all those things
- you can directly use it and get the data

-----------------------------------------BEANS---------------------------------------------------23 Jun 25

- you can get the bean in different ways one is by method name and other by setting the name of it
- you can also get it by the type as well like Address.class
- you can use existing beans to create new beans

-----------------------------SPRING CONTAINER, BEAN AND JAVA BEAN, POJO-----------------------------------

- spring container: it manages spring beans and their lifecycle
- there are two popular types of IOC containers: bean factory and application context

- Java bean: if a class has public no arguments constructor and has getters & setters and has implements serializable
- then instance of a class is called java bean

- anything which is managed by spring is called spring bean
- spring uses IOC container(Bean factory or application context) to manage these objects

- pojo: no constraints and any java object is pojo

-----------------------------------GET ALL BEANS--------------------------------------------24 Jun 25

- for getting all the beans list managed by the spring you can use the context.getBeanDefinitionNames()
- if you have multiple beans with the same class then it will give error
- for fixing it you will have to set one as a primary one by using @Primary annotation

- another way of autowiring is @Qualifier("qualifierName") and this will autowire the bean

-------------------------------RUN WITHOUT SEPARATE CONFIGURATION------------------------------26 Jun 25

- just copy all the beans from the configuration file and paste it in the annotation config file
- and make that file itself as a configuration file and pass the same filename in application context

-------------------------GETTING SPRING TO CREATE BEAN, @COMPONENT, @COMPONENT SCAN----------------------------------

- for getting spring to create the bean for use so we have to  declare the game class with annotation @Component
- after that just where we are using it we have to annotate it with @ComponentScan("packageName")
- package name where the component is available
- spring has created the object of pacman game and also autowired with the gaming console

- using the @component and @componentScan annotation spring is able to scan the right packages, find the components, create instances,
- autowire them for us and get the entire application up and running.
- when you give @componentScan without package name, it will scan the current package
- when you use @component then spring will manage the instance of a class

----------------------------------WHAT WE DID TILL NOW?-----------------------------------

- as all the beans, we have to declare under the @Configuration we annotated the main class as configuration
- then instead of creating the bean explicitly we used spring @component to define the bean
- and to search the bean we have used @component scan and tell the path
- this will search the component in the package you mentioned and autowire them
- if there are multiple component then it will give error
- so we have to declare one of them as @Primary
- or for running the specific one you cna use @Qualifier too

-----------------------------------@PRIMARY @QUALIFIER-------------------------------------

- @Primary: A bean should be given preference when multiple candidates are qualified
- @Qualifier: A specific bean should be autowired (name of the bean can be used as a qualifier)

- if it's okay to use any one of them then just use @Autowired
- if you want to use the specific one then use both @Autowired and @Qualifier("QualifierName")
- if you don't declare the name of the qualifier then just use the name of class with first letter small as a qualifier name

----------------------------------DEPENDENCY INJECTION TYPES--------------------------------

- Constructor Based: dependencies are set by creating the Bean using its constructor
- Setter Based: dependencies are set by calling the setter method on your beans
- Field: No setter or constructor. dependency is injected using reflection.

- if you declare the field of class inside a component and autowired it so it is defined as the field dependency injection
- if you declare the @Autowired in the setters method then it is called setter based dependency injection
- if you declare the @Autowired in the constructor then it is called the constructor based dependency injection

- when you use the constructor based injection then you don't need the @Autowired annotation
- the spring suggest to use the constructor based injection because all the initialization happened just in one method
- once the initialization is done, the bean is ready to use
- it's always recommended to use the constructor injection

-----------------------------------LAZY INITIALIZATION---------------------------------------27 Jun 25

- if you even don't write anything inside the application context but the initialization of bean will happen automatically
- so if you use the @Lazy annotation then it will not happen
- the bean will only initialize when it is used
- the bean will be loaded when it is used
- each bean is initialized at eager unless you use @Lazy annotation
- it is not recommended and not frequently used
- if you use it error will not be discovered when you start the application

------------------------------BEAN SCOPES: SINGLETON AND PROTOTYPE-------------------------------

- if you use the @Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE) then the object you try to get each time will be different
- but in normal class the instance will be same always

- Singleton: one object instance per spring IOC Container
- Prototype: possibly many object instances per spring IOC container

- if the same instance you will get back then it is called singleton
- if you get different instance by calling the same bean then it is called prototype

- scopes available only for web aware SpringApplicationContext
    - Request: one object instance per single http request
    - Session: one object instance per user http session
    - Application: one object instance per web application runtime
    - Websocket: one object instance per websocket instance

----------------------------------JAVA SINGLETON VS SPRING SINGLETON------------------------------

- java singleton: one object instance per JVM
- spring singleton: one object instance per spring IOC container

--------------------------------SPRING BEANS: POST CONSTRUCT AND PRE DESTROY-------------------------------------

- @PostConstruct: it is used on a method that needs to be executed after dependency injection is done to perform any initialization
- @PreDestroy: it is used to release the resource that it has been holding. Just before the bean is removed it will call this.
- ex: if you want to setup database then you will use post construct for the connection of db and pre destroy to close the connection.

------------------------------JAKARTA CONTEXT AND DEPENDENCY INJECTION (CDI)---------------------------------

- J2EE, Jakarta EE are same
- to use this add the dependency jakarta.inject
- it's an alternate method to inject the dependency
- here you need to use the @Named in place of the @Component and @Inject in place of @Autowired
- Named is replacement for Component and Inject is replacement for Autowired
- spring supports the Jakarta CDI

----------------------------------JAVA SPRING XML CONFIGURATION------------------------------------------

- first search for spring xml configuration in google and search the context and get the simple context example
- after that just declare the <bean> tag and give the id as bean name and class as java.lang.String for string value
- and inside the <constructor-arg> tag give the value you want in this case give the string value
- and in main method use the ClassPathXmlApplicationContext and give the xml file name with the extension
- and now you can use the xml configuration in your application
- and for the component scan use the tag <context:component-scan base-package="package-name"/>

- another way of getting the bean is use the class attribute and give the whole class path with package and provide the name

---------------------------------STEREOTYPE ANNOTATION: COMPONENTS AND MORE--------------------------------

- @Component: Generic annotation applicable for any class
- @Service: indicates that an annotated class has business logic
- @Controller: Indicates that an annotated class is a "controller" (e.g., a web controller)
    - used to define controllers in your web applications and REST Api
- @Repository: indicates that an annotated class is used to retrieve and/or manipulate data in database

- it's a good practice to use the above annotations instead of using the @Component the common annotation

---------------------------------------ALL ANNOTATIONS-----------------------------------------------------

- @Configuration: indicates that a class declare one or more @Bean methods and may be processed by the Spring container to generate bean definitions
- @ComponentScan: define specific packages to scan for components. If specific package is not defined scanning will occur from the package of the class that declares this annotation
- @Bean: indicates that a method produces a bean to be managed by spring container
- @Component: indicates that an annotated class is a component
- @Service: specialization of @Component indicating tha an annotated class has business logic
- @Controller: specialization of @Component indicating that an annotated class is a controller (e.g., a web controller). Used to define controllers in your web applications or REST API
- @Repository: specialization of @Component indicating that an annotated class is used to retrieve and/or manipulate data in a database
- @Primary: indicates that a bean should be given preference  when multiple candidates are qualified to autowire a single valued dependency
- @Qualifier: used on a field or parameter for candidate beans when autowiring
- @Lazy: indicates that a bean has to be lazily initialized. Absence of @Lazy annotation will lead to eager initialization
- @Scope(value=ConfigurableBeanFactory.SCOPE_PROTOTYPE): defines a bean to by a prototype - a new instance will be created every time you refer to the bean. Default scope is singleton - one instance per IOC container.
- @PostConstruct: identifies the method that will be executed after dependency injection is done to perform any initialization.
- @PreDestroy: identifies the method that will receive the callback notification to signal that instance is in the process of being removed by the container. Typically used to release the resource that it has been holding.
- @Named: Jakarta Contexts & Dependency Injection (CDI) Annotation similar to Component
- @Inject: Jakarta Contexts & Dependency Injection (CDI) Annotation similar to Autowired

---------------------------------------FRAMEWORK, MODULE AND PROJECTS-------------------------------------------

- Spring framework contains multiple Spring modules:
    - Fundamental features: Core (ioc container, dependency injection, autowiring,...)
    - Web: Spring MVC etc (Web Applications, REST API)
    - Web Reactive: Spring web flux etc
    - Data Access: JDBC, JPA etc
    - Integration: JMS etc
    - Testing: Mock Objects, Spring MVC Test etc

-------------------------------------IMPORTANT MAVEN COMMANDS------------------------------------

- mvn --version
- mvn compile: Compile source files
- mvn test-compile: Compile test files
    - observe carefully: this will also compile source files
- mvn clean: delete target directory
- mvn test: run unit tests
- mvn package: create a jar
- mvn help:effective-pom
- mvn dependency:tree

--------------------------------------SPRING BOOT, DEVTOOLS-------------------------------30 Jun 25

- go to the spring initializer and just create a new maven project with dependency spring web
- then just extract the project and open it in intellij
- after that just create a class with @RestController tag
- and for mapping the url use @RequestMapping("/url") in the method
- then just return the data in the form of list

- to check what is autoconfigure or make it to debug mode on the specific package
- write in application.properties file "logging.level.org.springframework=debug"

- if you addon the spring boot devtools dependency it will automatically restart the server and you will get the correct result
- so now you don't need to restart the server again and again manually
- spring boot devtools can not manage the changes in pom.xml file

-  to auto configure any thing just use the application.properties file

--------------------------------LOGGING LEVEL LOG, PROFILES-----------------------------------------

- trace, debug, info , warning, error, off
- for setting up the profile, first create the different properties files with names, application-dev.properties
- then just add the "spring.profiles.active=dev"
- the above will merge both the properties files and give the priority to the dev property file

------------------------------------CONFIGURATION PROPERTIES, EMBEDDED SERVER--------------------------------

- in this i am taking the example of currency service
- for this just create a class and annotate it with @ConfigurationProperties(prefix="currency-service")
- and also make it a bean by annotating it @Component

- previously we have to create a war file and then use the server then only we can run our application
- but you can just generate the jar file by mvn clean install
- and then you can run it by java -jar "jar file" in the cmd and it will run the application
- you need not to install and fix the server, it will embed automatically

----------------------------------SPRING BOOT ACTUATOR-----------------------------

- monitor and manage your application in the production
- provides a number of endpoints:
    - beans: complete list of spring beans in your app
    - health: application health information
    - metrics: Application metrics
    - mappings: details around request mapping

- firstly you will have to add the dependency web-actuator
- by default it will show only health but if you want to see all the things then you will have to add "management.endpoints.web.exposure.include=*" in the application.properties file
- and try hitting the /actuator
- this is the another way to check whether the specific bean is configured or not

--------------------------------JPA & HIBERNATE-----------------------------------------

- for this just create a new project using the spring initializer
- and add the dependency spring web, spring data jdbc, spring data jpa, h2 database

- to enable the h2 database just write "spring.h2.console.enabled=true" in application.properties file
- after that just hit the url localhost:8080/h2-console
- you have to pick the url from the log and then try for connect
- so instead using it manually or getting the static url write "spring.datasource.url=jdbc:h2:mem:testdb"
- if you have schema.sql inside the resource so it will execute the file and create table for you

-------------------------------SPRING JDBC, COMMAND LINE RUNNER---------------------------------------------------

- for this just create a class with annotation @Repository as it is interacting with database
- then just get the JdbcTemplate variable and using that with update() method you can execute the insert, update and delete query.

- just create a new class and implement it with CommandLineRunner
- after that autowire the repo class in the new class where you implemented the command line runner
- and by using that run the query or insert method inside the run() method.

- to get the single object use template.queryForObject() and pass the query with new BeanPropertyRowMapper<>(Course.class)

------------------------------------JPA------------------------------------------------------------

- for this just create a class and annotate it with the @Repository
- then just create a field Entity manager and autowire it and then just in insert method use entityManager.merge(course);
- here instead of @Autowired use more specific @PersistenceContext
- also add the annotation @Transactional in Repository

- if you add "spring.jpa.show-sql=true" then it will show all the queries executed in the logs

- spring jpa: create an interface and implement JpaRepository<Course, Long> after that get it

---------------------------------OVERVIEW----------------------------------------------------

- jdbc: we have to set the connection manually with code
- spring jdbc: just create the object of jdbc template and using that execute the sql queries
- jpa: using the entity manager you can execute the sql without writing the sql queries
- spring data jpa: here we don't even need to create the method, predefined methods are available

- when use jpa implementation

-------------------------------------------HIBERNATE VS JPA-------------------------------------------

- JPA defines specifications. it is an api
	- how do you define entities?
	- how do you map attributes?
	- who manages the entities?
- hibernate is popular implementation of jpa
- using hibernate directly would result in a lock in to hibernate
	- there are other JPA implementations(Toplink, for example)
- always use jpa in your code